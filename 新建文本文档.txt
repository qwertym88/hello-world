### 前言
本人一向很水，但看在我立了flag的缘故，不得不收起惰性，忍受着学校的迷之网速和极其明显的作业做不完的凉凉之感，在此为大家写。作为第二次，谨此纪念。
本篇为了体现我不是一个水货（虽然事实上就是），将讨论得深一点。

---

## 正文
先快速过一下基础知识。。。
### 函数模板
函数模板作为函数重载的“高级”版本，事实上作用早就超出了一般的重载。比如一个巧妙地获取数组长度的函数
```c++
template<class T,size_t N>
size_t len(T (&arr)[N]){
	return N;
}
```
它可以获取所有一般数组（不包括自定义容器），但在面对string等时有一个小bug（末尾有一个‘\n’,而很明显我们并不想算入数组长度），所以需要一个特例化的模板。
```c++
template<size_t N>
size_t len(char (&arr)[N]){
	return N-1;
}
```
大功告成。事实上，对任意容器，应该也可以用类似的办法获取长度（用迭代器？）
可参考[https://blog.csdn.net/lezardfu/article/details/56852043](https://blog.csdn.net/lezardfu/article/details/56852043)
### 类模板
与函数模板很像，只不过更加好玩。它可以传入常量参数，所以说它诞生了一个毁青春的东西，模板元编程。
### 模板元（搞笑的）
可参考:
* <https://www.cnblogs.com/qicosmos/p/4480460.html>
* 一本书,[模板元编程]( "下载pdf")

### 函数指针
实在没什么说的，上代码。
```c++
int foo(int a,int b){};
struct bar{
	int a(int b){};
	static void g(int b){};
}
typedef int(*pfn1)(int,int);
//通式： 返回类型（*变量名）（参数列表）= 函数名 //可不加 &
//通式2： 返回类型（*命名空间::变量名）（参数列表）= &命名空间::函数名 //必须有 &
int(*pfn2)(int,int) =foo;
//= pfn1 pfn2=foo
int(*bar::pfn3)(int)=&bar::a;
void(*pfn4)(int)=bar::g;//static 相当于独立于类之外
bar test;
(*test.pfn3)(1);//使用必须有一个实例
pfn4(5);//static 不用
```
注意几点
1. 指针的正确书写
2. 正确使用

可参考：
<https://blog.csdn.net/u010525694/article/details/72897766>

开始秀起来了
### 仿函数 functor
所谓仿函数，并不复杂，仅仅是一个实现了 operator() 的类罢了。但还是会给编程带了很多便利，例如[count_if 问题](https://www.cnblogs.com/decade-dnbc66/p/5347088.html '感谢原作者')。
若想深究，可自行搜索，此处不再赘述。
可参考：
<https://blog.csdn.net/yansmile1/article/details/58603871>
### c++11 可变模板参数
这是一个好东西啊。本人长期信奉c++11大法，因为它太好用了。目前我才摸着边边，所以以下如果有错，别找我。
c++11大大加大了程序的泛化程度，有的程序因此变得更像程序，而有的，呵呵
```c++
//某坑爹模板元
//转载于 http://www.cnblogs.com/qicosmos/p/3318070.html
//你认为我这个蒟蒻能和那些神犇比吗？不可能的。
template<class Tuple, std::size_t N>
struct TuplePrinter {
    static void print(const Tuple& t)
    {
        TuplePrinter<Tuple, N - 1>::print(t);
        std::cout << ", " << std::get<N - 1>(t);
    }
};

template<class Tuple>
struct TuplePrinter<Tuple, 1>{
    static void print(const Tuple& t)
    {
        std::cout << std::get<0>(t);
    }
};

template<class... Args>
void PrintTuple(const std::tuple<Args...>& t)
{
    std::cout << "(";
    TuplePrinter<decltype(t), sizeof...(Args)>::print(t);
    std::cout << ")\n";
}

//main
auto tp=make_tuple(1,2,12.5);
PrintTuple(tp);
// (1,2,12.5)
```
c里面也有类似的，但不如这个好用。展开可变模板的方式很多，但我们要讲的不是这个，而是更加玄幻的。
### 匿名函数 lamba
匿名函数也是个好东西，用没用过js的都知道。
它也有结构通式。`[捕获列表]（参数列表）->返回值{函数主体}`，其中返回值也可以自动推断，前提是计算量简单。捕获列表是个比较有趣的东西，因为它可以准确捕获外界变量。有些时候lamba也会和闭包（closure）（具体了解参见<https://www.cnblogs.com/BigFeng/p/5204899.html>）.
此处仍然不会详细讲，可参考<https://www.cnblogs.com/DswCnblog/p/5629165.html>。
### c++11 function对象
终于，广大人民对函数指针的深恶痛绝终于转换成了无限的动力，<del>从此终于再也不用写函数指针了！</del>
社会的进步就是在于抛弃旧的，迎接新的。看一下可爱的function对象吧。
```c++
//#include<functional>
int foo(int a,int b){};
struct bar{
    int a(int b){};
    static void g(int b){};
}
struct F{//functor
	int sum=0;
	void operator()(int a){
		sum+=a;
	}
}

//int(*pfn2)(int,int) =foo;
function<int(int,int)> pfn2=foo;//简不简单？

//int(*bar::pfn3)(int)=&bar::a;
function<int(const bar&,int)> pfn3=&bar::a;//注意要传入一个实例作为函数中的this

//void(*pfn4)(int)=bar::g;
function<void(int)> pfn4=bar::g;

bar test;
pfn2();
//(*test.pfn3)(1);
pfn3(test,1);//明显更加直观了，简洁了
pfn4(5);

F f;
function<void(int)> fn=f;
fn(10);//发现sum值并没有改变，function按值传递
//如果要改变，则应为
//function<void(int)> fn=ref(reference_wrapper<F>(f));//ref_warp可以不用
```
